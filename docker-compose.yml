services:
  # Nginx reverse proxy for Blue-Green deployment
  nginx:
    image: nginx:alpine
    container_name: hono-nginx
    restart: unless-stopped
    ports:
      - "4000:80"  # External access via port 4000
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
    entrypoint: /bin/sh -c "nginx -g 'daemon off;'"
    depends_on:
      - hono-app-blue
    networks:
      - my-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 3s
      retries: 3

  # Blue environment (initially active)
  hono-app-blue:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    image: hono-app:latest
    container_name: hono-app-blue
    restart: unless-stopped
    ports:
      - "4001:4000"
    environment:
      - PORT=4000
      - ENV_COLOR=blue
    networks:
      - my-network
    env_file:
      - .env
    healthcheck:
      test: ["CMD", "bun", "fetch", "http://localhost:4000/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 5s
    # Uncomment to add volume for logs
    # volumes:
    #   - ./logs:/app/logs

  # Green environment (for rolling deployment)
  hono-app-green:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    image: hono-app:latest
    container_name: hono-app-green
    restart: unless-stopped
    ports:
      - "4002:4000"
    environment:
      - PORT=4000
      - ENV_COLOR=green
    networks:
      - my-network
    env_file:
      - .env
    healthcheck:
      test: ["CMD", "bun", "fetch", "http://localhost:4000/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 5s
    profiles:
      - green  # Start only when explicitly specified
    # Uncomment to add volume for logs
    # volumes:
    #   - ./logs:/app/logs

  # Example: Add PostgreSQL database
  # db:
  #   image: postgres:16-alpine
  #   container_name: postgres-db
  #   restart: unless-stopped
  #   environment:
  #     POSTGRES_USER: postgres
  #     POSTGRES_PASSWORD: password
  #     POSTGRES_DB: mydb
  #   ports:
  #     - "5432:5432"
  #   volumes:
  #     - postgres-data:/var/lib/postgresql/data
  #   networks:
  #     - app-network

  # Example: Add Redis cache
  # redis:
  #   image: redis:7-alpine
  #   container_name: redis-cache
  #   restart: unless-stopped
  #   ports:
  #     - "6379:6379"
  #   networks:
  #     - app-network

networks:
  my-network:
    driver: bridge
# volumes:
#   postgres-data:
